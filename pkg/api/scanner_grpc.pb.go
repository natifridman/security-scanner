// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/scanner.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecurityScanner_ListRepositories_FullMethodName = "/scanner.SecurityScanner/ListRepositories"
	SecurityScanner_GetRepository_FullMethodName    = "/scanner.SecurityScanner/GetRepository"
	SecurityScanner_ScanRepository_FullMethodName   = "/scanner.SecurityScanner/ScanRepository"
	SecurityScanner_ScanOrganization_FullMethodName = "/scanner.SecurityScanner/ScanOrganization"
)

// SecurityScannerClient is the client API for SecurityScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The security scanner service definition
type SecurityScannerClient interface {
	// List repositories in a GitHub organization
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// Get detailed information about a specific repository
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*RepositoryDetail, error)
	// Scan a repository for security policy violations
	ScanRepository(ctx context.Context, in *ScanRepositoryRequest, opts ...grpc.CallOption) (*ScanResult, error)
	// Scan all repositories in an organization
	ScanOrganization(ctx context.Context, in *ScanOrganizationRequest, opts ...grpc.CallOption) (*ScanOrganizationResult, error)
}

type securityScannerClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityScannerClient(cc grpc.ClientConnInterface) SecurityScannerClient {
	return &securityScannerClient{cc}
}

func (c *securityScannerClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, SecurityScanner_ListRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityScannerClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*RepositoryDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepositoryDetail)
	err := c.cc.Invoke(ctx, SecurityScanner_GetRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityScannerClient) ScanRepository(ctx context.Context, in *ScanRepositoryRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, SecurityScanner_ScanRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityScannerClient) ScanOrganization(ctx context.Context, in *ScanOrganizationRequest, opts ...grpc.CallOption) (*ScanOrganizationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanOrganizationResult)
	err := c.cc.Invoke(ctx, SecurityScanner_ScanOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityScannerServer is the server API for SecurityScanner service.
// All implementations must embed UnimplementedSecurityScannerServer
// for forward compatibility.
//
// The security scanner service definition
type SecurityScannerServer interface {
	// List repositories in a GitHub organization
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// Get detailed information about a specific repository
	GetRepository(context.Context, *GetRepositoryRequest) (*RepositoryDetail, error)
	// Scan a repository for security policy violations
	ScanRepository(context.Context, *ScanRepositoryRequest) (*ScanResult, error)
	// Scan all repositories in an organization
	ScanOrganization(context.Context, *ScanOrganizationRequest) (*ScanOrganizationResult, error)
	mustEmbedUnimplementedSecurityScannerServer()
}

// UnimplementedSecurityScannerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityScannerServer struct{}

func (UnimplementedSecurityScannerServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedSecurityScannerServer) GetRepository(context.Context, *GetRepositoryRequest) (*RepositoryDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedSecurityScannerServer) ScanRepository(context.Context, *ScanRepositoryRequest) (*ScanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanRepository not implemented")
}
func (UnimplementedSecurityScannerServer) ScanOrganization(context.Context, *ScanOrganizationRequest) (*ScanOrganizationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanOrganization not implemented")
}
func (UnimplementedSecurityScannerServer) mustEmbedUnimplementedSecurityScannerServer() {}
func (UnimplementedSecurityScannerServer) testEmbeddedByValue()                         {}

// UnsafeSecurityScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityScannerServer will
// result in compilation errors.
type UnsafeSecurityScannerServer interface {
	mustEmbedUnimplementedSecurityScannerServer()
}

func RegisterSecurityScannerServer(s grpc.ServiceRegistrar, srv SecurityScannerServer) {
	// If the following call pancis, it indicates UnimplementedSecurityScannerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecurityScanner_ServiceDesc, srv)
}

func _SecurityScanner_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityScannerServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityScanner_ListRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityScannerServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityScanner_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityScannerServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityScanner_GetRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityScannerServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityScanner_ScanRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityScannerServer).ScanRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityScanner_ScanRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityScannerServer).ScanRepository(ctx, req.(*ScanRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityScanner_ScanOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityScannerServer).ScanOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityScanner_ScanOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityScannerServer).ScanOrganization(ctx, req.(*ScanOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityScanner_ServiceDesc is the grpc.ServiceDesc for SecurityScanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityScanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scanner.SecurityScanner",
	HandlerType: (*SecurityScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _SecurityScanner_ListRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _SecurityScanner_GetRepository_Handler,
		},
		{
			MethodName: "ScanRepository",
			Handler:    _SecurityScanner_ScanRepository_Handler,
		},
		{
			MethodName: "ScanOrganization",
			Handler:    _SecurityScanner_ScanOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scanner.proto",
}
